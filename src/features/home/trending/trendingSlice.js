import { createAsyncThunk, createSlice, current } from "@reduxjs/toolkit";
import { getListMoviesTrending } from "../../../service/moviesApi";

const initialState = {
  tabTrending: "day",
  cardVisibility: true,
  listMoviesTrending: Array.from({ length: 8 }, (_, i) => i + 1).map((num) => ({
    id: num,
  })),
};

export const getMoviesTrendingType = "trending/getListMoviesTrendingAsync";

export const payloadCreator = async (params, thunkAPI) => {
  const { rejectWithValue, dispatch } = thunkAPI;

  if (!params) {
    const rejectValue = {
      errorMessage: "Params must not be undifined",
    };
    throw rejectWithValue(rejectValue);
  }
  const response = await getListMoviesTrending(params);
  return { response, dispatch };
};

export const getListMoviesTrendingAsync = createAsyncThunk(
  getMoviesTrendingType,
  payloadCreator
);
// createAsyncThunk generates 3 action creators: pending, fullfiled, rejected
// getListMoviesTrendingAsync = a standard Redux thunk action creator

const trendingSlice = createSlice({
  name: "trending",
  initialState,
  reducers: {
    setTabTrending(state, action) {
      state.tabTrending = action.payload;
    },
    setListTrendingAfterTimeout(state, action) {
      state.listMoviesTrending = action.payload;
      state.cardVisibility = true;
    },
  },
  extraReducers: (builder) => {
    const fullfiledCallback = (state, action) => {
      state.cardVisibility = false;
      setTimeout(() => {
        action.payload.dispatch(
          setListTrendingAfterTimeout(action.payload.response.results)
        );
      }, 500);
    };

    builder
      // getListMoviesTrendingAsync.pending = action creator function, generated by createAsyncThunk
      .addCase(getListMoviesTrendingAsync.fulfilled, fullfiledCallback);
  },
});

export const { setTabTrending, setListTrendingAfterTimeout } =
  trendingSlice.actions;

export const trendingReducer = trendingSlice.reducer;
